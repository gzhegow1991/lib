<?php

/**
 * This class is autogenerated.
 */

namespace Gzhegow\Lib\Modules;

use Gzhegow\Lib\Exception\LogicException;
use Gzhegow\Lib\Lib;
use Gzhegow\Lib\Modules\Arr\ArrPath;
use Gzhegow\Lib\Modules\Bcmath\Bcnumber;
use Gzhegow\Lib\Modules\Bcmath\Number;
use Gzhegow\Lib\Modules\Net\AddressIpV4;
use Gzhegow\Lib\Modules\Net\AddressIpV6;
use Gzhegow\Lib\Modules\Net\SubnetV4;
use Gzhegow\Lib\Modules\Net\SubnetV6;
use Gzhegow\Lib\Modules\Php\Nil;
use Gzhegow\Lib\Modules\Str\Alphabet;

class TypeThrowModule
{
	/**
	 * @param mixed|null $result
	 */
	public function empty(&$result, $value): bool
	{
		if (Lib::type()->empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `empty` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_empty(&$result, $value): bool
	{
		if (Lib::type()->any_not_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_empty` is failed", $value ]);
	}


	/**
	 * > Специальный тип, который значит, что значение можно отбросить или не учитывать, т.к. оно не несёт информации
	 *
	 * @param string|array|\Countable|null $result
	 */
	public function blank(&$result, $value): bool
	{
		if (Lib::type()->blank($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `blank` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_blank(&$result, $value): bool
	{
		if (Lib::type()->any_not_blank($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_blank` is failed", $value ]);
	}


	/**
	 * > Специальный тип, который значит, что значение можно заменить NULL-ом
	 *
	 * @param mixed|null $result
	 */
	public function nullable(&$result, $value): bool
	{
		if (Lib::type()->nullable($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `nullable` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_nullable(&$result, $value): bool
	{
		if (Lib::type()->any_not_nullable($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_nullable` is failed", $value ]);
	}


	/**
	 * > Специальный тип, который значит, что значение было отправлено пользователем, а не появилось из PHP
	 *
	 * @param mixed|null $result
	 */
	public function passed(&$result, $value): bool
	{
		if (Lib::type()->passed($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `passed` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_passed(&$result, $value): bool
	{
		if (Lib::type()->any_not_passed($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_passed` is failed", $value ]);
	}


	/**
	 * > Специальный тип-синоним NULL, переданный пользователем через API, например '{N}'
	 * > в случаях, когда NULL интерпретируется как "не трогать", а NIL как "очистить"
	 *
	 * > NAN не равен ничему даже самому себе
	 * > NIL равен только самому себе
	 * > NULL означает пустоту и им можно заменить значения '', [], `resource (closed)`, NIL, но нельзя заменить NAN
	 *
	 * @param string|Nil|null $result
	 */
	public function nil(&$result, $value): bool
	{
		if (Lib::type()->nil($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `nil` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_nil(&$result, $value): bool
	{
		if (Lib::type()->any_not_nil($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_nil` is failed", $value ]);
	}


	/**
	 * @param null $result
	 */
	public function a_null(&$result, $value): bool
	{
		if (Lib::type()->a_null($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_null` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_null(&$result, $value): bool
	{
		if (Lib::type()->any_not_null($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_null` is failed", $value ]);
	}


	/**
	 * @param bool|null $result
	 */
	public function a_bool(&$result, $value): bool
	{
		if (Lib::type()->a_bool($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_bool` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function an_any_not_bool(&$result, $value): bool
	{
		if (Lib::type()->an_any_not_bool($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `an_any_not_bool` is failed", $value ]);
	}


	/**
	 * @param false|null $result
	 */
	public function a_false(&$result, $value): bool
	{
		if (Lib::type()->a_false($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_false` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_false(&$result, $value): bool
	{
		if (Lib::type()->any_not_false($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_false` is failed", $value ]);
	}


	/**
	 * @param true|null $result
	 */
	public function a_true(&$result, $value): bool
	{
		if (Lib::type()->a_true($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_true` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_true(&$result, $value): bool
	{
		if (Lib::type()->any_not_true($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_true` is failed", $value ]);
	}


	/**
	 * @param bool|null $result
	 */
	public function bool(&$result, $value): bool
	{
		if (Lib::type()->bool($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `bool` is failed", $value ]);
	}


	/**
	 * @param false|null $result
	 */
	public function false(&$result, $value): bool
	{
		if (Lib::type()->false($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `false` is failed", $value ]);
	}


	/**
	 * @param false|null $result
	 */
	public function true(&$result, $value): bool
	{
		if (Lib::type()->true($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `true` is failed", $value ]);
	}


	/**
	 * @param bool|null $result
	 */
	public function userbool(&$result, $value): bool
	{
		if (Lib::type()->userbool($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `userbool` is failed", $value ]);
	}


	/**
	 * @param false|null $result
	 */
	public function userfalse(&$result, $value): bool
	{
		if (Lib::type()->userfalse($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `userfalse` is failed", $value ]);
	}


	/**
	 * @param false|null $result
	 */
	public function usertrue(&$result, $value): bool
	{
		if (Lib::type()->usertrue($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `usertrue` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function nan(&$result, $value): bool
	{
		if (Lib::type()->nan($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `nan` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_not_nan(&$result, $value): bool
	{
		if (Lib::type()->float_not_nan($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_not_nan` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_nan(&$result, $value): bool
	{
		if (Lib::type()->any_not_nan($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_nan` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function finite(&$result, $value): bool
	{
		if (Lib::type()->finite($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `finite` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_not_finite(&$result, $value): bool
	{
		if (Lib::type()->float_not_finite($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_not_finite` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_finite(&$result, $value): bool
	{
		if (Lib::type()->any_not_finite($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_finite` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function infinite(&$result, $value): bool
	{
		if (Lib::type()->infinite($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `infinite` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_not_infinite(&$result, $value): bool
	{
		if (Lib::type()->float_not_infinite($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_not_infinite` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_infinite(&$result, $value): bool
	{
		if (Lib::type()->any_not_infinite($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_infinite` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric(&$result, $value, ?bool $isAllowExp = null, array $refs = []): bool
	{
		if (Lib::type()->numeric($result, $value, $isAllowExp, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric` is failed", $value, $isAllowExp, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_non_zero(&$result, $value, ?bool $allowExp = null, array $refs = []): bool
	{
		if (Lib::type()->numeric_non_zero($result, $value, $allowExp, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_non_zero` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_non_negative(&$result, $value, ?bool $allowExp = null, array $refs = []): bool
	{
		if (Lib::type()->numeric_non_negative($result, $value, $allowExp, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_non_negative` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_non_positive(&$result, $value, ?bool $allowExp = null, array $refs = []): bool
	{
		if (Lib::type()->numeric_non_positive($result, $value, $allowExp, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_non_positive` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_negative(&$result, $value, ?bool $allowExp = null, array $refs = []): bool
	{
		if (Lib::type()->numeric_negative($result, $value, $allowExp, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_negative` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_positive(&$result, $value, ?bool $allowExp = null, array $refs = []): bool
	{
		if (Lib::type()->numeric_positive($result, $value, $allowExp, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_positive` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_non_zero(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_non_zero($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_non_zero` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_non_negative(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_non_negative($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_non_negative` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_non_positive(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_non_positive($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_non_positive` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_negative(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_negative($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_negative` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_positive(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_positive($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_positive` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_positive_or_minus_one(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_positive_or_minus_one($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_positive_or_minus_one` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_int_non_negative_or_minus_one(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_int_non_negative_or_minus_one($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_int_non_negative_or_minus_one` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_float(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_float($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_float` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_float_non_zero(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_float_non_zero($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_float_non_zero` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_float_non_negative(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_float_non_negative($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_float_non_negative` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_float_non_positive(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_float_non_positive($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_float_non_positive` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_float_negative(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_float_negative($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_float_negative` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function numeric_float_positive(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->numeric_float_positive($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `numeric_float_positive` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function decimal(&$result, $value, int $scale = 0, array $refs = []): bool
	{
		if (Lib::type()->decimal($result, $value, $scale, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `decimal` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function decimal_non_zero(&$result, $value, int $scale = 0, array $refs = []): bool
	{
		if (Lib::type()->decimal_non_zero($result, $value, $scale, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `decimal_non_zero` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function decimal_non_negative(&$result, $value, int $scale = 0, array $refs = []): bool
	{
		if (Lib::type()->decimal_non_negative($result, $value, $scale, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `decimal_non_negative` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function decimal_non_positive(&$result, $value, int $scale = 0, array $refs = []): bool
	{
		if (Lib::type()->decimal_non_positive($result, $value, $scale, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `decimal_non_positive` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function decimal_negative(&$result, $value, int $scale = 0, array $refs = []): bool
	{
		if (Lib::type()->decimal_negative($result, $value, $scale, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `decimal_negative` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function decimal_positive(&$result, $value, int $scale = 0, array $refs = []): bool
	{
		if (Lib::type()->decimal_positive($result, $value, $scale, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `decimal_positive` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @param int|float|null $result
	 */
	public function num(&$result, $value): bool
	{
		if (Lib::type()->num($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `num` is failed", $value ]);
	}


	/**
	 * @param int|float|null $result
	 */
	public function num_non_zero(&$result, $value): bool
	{
		if (Lib::type()->num_non_zero($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `num_non_zero` is failed", $value ]);
	}


	/**
	 * @param int|float|null $result
	 */
	public function num_non_negative(&$result, $value): bool
	{
		if (Lib::type()->num_non_negative($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `num_non_negative` is failed", $value ]);
	}


	/**
	 * @param int|float|null $result
	 */
	public function num_non_positive(&$result, $value): bool
	{
		if (Lib::type()->num_non_positive($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `num_non_positive` is failed", $value ]);
	}


	/**
	 * @param int|float|null $result
	 */
	public function num_negative(&$result, $value): bool
	{
		if (Lib::type()->num_negative($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `num_negative` is failed", $value ]);
	}


	/**
	 * @param int|float|null $result
	 */
	public function num_positive(&$result, $value): bool
	{
		if (Lib::type()->num_positive($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `num_positive` is failed", $value ]);
	}


	/**
	 * @param int|null $result
	 */
	public function int(&$result, $value): bool
	{
		if (Lib::type()->int($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int` is failed", $value ]);
	}


	/**
	 * @param int|null $result
	 */
	public function int_non_zero(&$result, $value): bool
	{
		if (Lib::type()->int_non_zero($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_non_zero` is failed", $value ]);
	}


	/**
	 * @param int|null $result
	 */
	public function int_non_negative(&$result, $value): bool
	{
		if (Lib::type()->int_non_negative($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_non_negative` is failed", $value ]);
	}


	/**
	 * @param int|null $result
	 */
	public function int_non_positive(&$result, $value): bool
	{
		if (Lib::type()->int_non_positive($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_non_positive` is failed", $value ]);
	}


	/**
	 * @param int|null $result
	 */
	public function int_negative(&$result, $value): bool
	{
		if (Lib::type()->int_negative($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_negative` is failed", $value ]);
	}


	/**
	 * @param int|null $result
	 */
	public function int_positive(&$result, $value): bool
	{
		if (Lib::type()->int_positive($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_positive` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function int_positive_or_minus_one(&$result, $value): bool
	{
		if (Lib::type()->int_positive_or_minus_one($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_positive_or_minus_one` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function int_non_negative_or_minus_one(&$result, $value): bool
	{
		if (Lib::type()->int_non_negative_or_minus_one($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `int_non_negative_or_minus_one` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float(&$result, $value): bool
	{
		if (Lib::type()->float($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_non_zero(&$result, $value): bool
	{
		if (Lib::type()->float_non_zero($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_non_zero` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_non_negative(&$result, $value): bool
	{
		if (Lib::type()->float_non_negative($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_non_negative` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_non_positive(&$result, $value): bool
	{
		if (Lib::type()->float_non_positive($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_non_positive` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_negative(&$result, $value): bool
	{
		if (Lib::type()->float_negative($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_negative` is failed", $value ]);
	}


	/**
	 * @param float|null $result
	 */
	public function float_positive(&$result, $value): bool
	{
		if (Lib::type()->float_positive($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `float_positive` is failed", $value ]);
	}


	/**
	 * @param Number|null $result
	 */
	public function number(&$result, $value, ?bool $allowExp = null): bool
	{
		if (Lib::type()->number($result, $value, $allowExp)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `number` is failed", $value, $allowExp ]);
	}


	/**
	 * @param Bcnumber|null $result
	 */
	public function bcnumber(&$result, $value): bool
	{
		if (Lib::type()->bcnumber($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `bcnumber` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function a_string(&$result, $value): bool
	{
		if (Lib::type()->a_string($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_string` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function a_string_empty(&$result, $value): bool
	{
		if (Lib::type()->a_string_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_string_empty` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function a_string_not_empty(&$result, $value): bool
	{
		if (Lib::type()->a_string_not_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_string_not_empty` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function a_trim(&$result, $value): bool
	{
		if (Lib::type()->a_trim($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `a_trim` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function string(&$result, $value): bool
	{
		if (Lib::type()->string($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `string` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function string_empty(&$result, $value): bool
	{
		if (Lib::type()->string_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `string_empty` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function string_not_empty(&$result, $value): bool
	{
		if (Lib::type()->string_not_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `string_not_empty` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function trim(&$result, $value, ?string $characters = null): bool
	{
		if (Lib::type()->trim($result, $value, $characters)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `trim` is failed", $value, $characters ]);
	}


	/**
	 * @param string|null $result
	 */
	public function char(&$result, $value): bool
	{
		if (Lib::type()->char($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `char` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function letter(&$result, $value): bool
	{
		if (Lib::type()->letter($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `letter` is failed", $value ]);
	}


	/**
	 * @param Alphabet|null $result
	 */
	public function alphabet(&$result, $value): bool
	{
		if (Lib::type()->alphabet($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `alphabet` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function ctype_digit(&$result, $value): bool
	{
		if (Lib::type()->ctype_digit($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `ctype_digit` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function ctype_alpha(&$result, $value, ?bool $isIgnoreCase = null): bool
	{
		if (Lib::type()->ctype_alpha($result, $value, $isIgnoreCase)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `ctype_alpha` is failed", $value, $isIgnoreCase ]);
	}


	/**
	 * @param string|null $result
	 */
	public function ctype_alnum(&$result, $value, ?bool $isIgnoreCase = null): bool
	{
		if (Lib::type()->ctype_alnum($result, $value, $isIgnoreCase)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `ctype_alnum` is failed", $value, $isIgnoreCase ]);
	}


	/**
	 * @param string|null $result
	 */
	public function base(&$result, $value, $alphabet): bool
	{
		if (Lib::type()->base($result, $value, $alphabet)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `base` is failed", $value, $alphabet ]);
	}


	/**
	 * @param string|null $result
	 */
	public function base_bin(&$result, $value): bool
	{
		if (Lib::type()->base_bin($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `base_bin` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function base_oct(&$result, $value): bool
	{
		if (Lib::type()->base_oct($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `base_oct` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function base_dec(&$result, $value): bool
	{
		if (Lib::type()->base_dec($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `base_dec` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function base_hex(&$result, $value): bool
	{
		if (Lib::type()->base_hex($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `base_hex` is failed", $value ]);
	}


	/**
	 * @param array|null $result
	 */
	public function array_empty(&$result, $value): bool
	{
		if (Lib::type()->array_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_empty` is failed", $value ]);
	}


	/**
	 * @param array|null $result
	 */
	public function array_not_empty(&$result, $value): bool
	{
		if (Lib::type()->array_not_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_not_empty` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function any_not_array_empty(&$result, $value): bool
	{
		if (Lib::type()->any_not_array_empty($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_array_empty` is failed", $value ]);
	}


	/**
	 * @param mixed|null $result
	 */
	public function key_exists(&$result, $value, $key): bool
	{
		if (Lib::type()->key_exists($result, $value, $key)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `key_exists` is failed", $value, $key ]);
	}


	/**
	 * @param array|null $result
	 */
	public function array_plain(&$result, $value): bool
	{
		if (Lib::type()->array_plain($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_plain` is failed", $value ]);
	}


	/**
	 * @param array|null $result
	 */
	public function list(&$result, $value, ?bool $isPlain = null): bool
	{
		if (Lib::type()->list($result, $value, $isPlain)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `list` is failed", $value, $isPlain ]);
	}


	/**
	 * @param array|null $result
	 */
	public function list_sorted(&$result, $value, ?bool $isPlain = null): bool
	{
		if (Lib::type()->list_sorted($result, $value, $isPlain)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `list_sorted` is failed", $value, $isPlain ]);
	}


	/**
	 * @param array|null $result
	 */
	public function dict(&$result, $value, ?bool $isPlain = null): bool
	{
		if (Lib::type()->dict($result, $value, $isPlain)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `dict` is failed", $value, $isPlain ]);
	}


	/**
	 * @param array|null $result
	 */
	public function dict_sorted(&$result, $value, ?bool $isPlain = null): bool
	{
		if (Lib::type()->dict_sorted($result, $value, $isPlain)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `dict_sorted` is failed", $value, $isPlain ]);
	}


	/**
	 * @param array|null $result
	 */
	public function table(&$result, $value): bool
	{
		if (Lib::type()->table($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `table` is failed", $value ]);
	}


	/**
	 * @param array|null $result
	 */
	public function matrix(&$result, $value): bool
	{
		if (Lib::type()->matrix($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `matrix` is failed", $value ]);
	}


	/**
	 * @param array|null $result
	 */
	public function matrix_strict(&$result, $value): bool
	{
		if (Lib::type()->matrix_strict($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `matrix_strict` is failed", $value ]);
	}


	/**
	 * @param ArrPath|null $result
	 */
	public function arrpath(&$result, $path, ?string $dot = null): bool
	{
		if (Lib::type()->arrpath($result, $path, $dot)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `arrpath` is failed", $path, $dot ]);
	}


	/**
	 * @param array|null $result
	 */
	public function array_of_type(&$result, $value, string $type): bool
	{
		if (Lib::type()->array_of_type($result, $value, $type)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_of_type` is failed", $value, $type ]);
	}


	/**
	 * @param resource[]|null $result
	 */
	public function array_of_resource_type(&$result, $value, string $resourceType): bool
	{
		if (Lib::type()->array_of_resource_type($result, $value, $resourceType)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_of_resource_type` is failed", $value, $resourceType ]);
	}


	/**
	 * @template T
	 *
	 * @param T[]             $result
	 * @param class-string<T> $className
	 */
	public function array_of_a(&$result, $value, string $className): bool
	{
		if (Lib::type()->array_of_a($result, $value, $className)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_of_a` is failed", $value, $className ]);
	}


	/**
	 * @template T
	 *
	 * @param T[]             $result
	 * @param class-string<T> $className
	 */
	public function array_of_class(&$result, $value, string $className): bool
	{
		if (Lib::type()->array_of_class($result, $value, $className)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_of_class` is failed", $value, $className ]);
	}


	/**
	 * @template T
	 *
	 * @param T[]             $result
	 * @param class-string<T> $className
	 */
	public function array_of_subclass(&$result, $value, string $className): bool
	{
		if (Lib::type()->array_of_subclass($result, $value, $className)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_of_subclass` is failed", $value, $className ]);
	}


	/**
	 * @param array|null $result
	 */
	public function array_of_callback(&$result, $value, callable $fn, array $args = []): bool
	{
		if (Lib::type()->array_of_callback($result, $value, $fn, $args)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `array_of_callback` is failed", $value, $fn, $args ]);
	}


	/**
	 * @param string|null $result
	 */
	public function regex(&$result, $value): bool
	{
		if (Lib::type()->regex($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `regex` is failed", $value ]);
	}


	/**
	 * @param AddressIpV4|AddressIpV6|null $result
	 */
	public function address_ip(&$result, $value): bool
	{
		if (Lib::type()->address_ip($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `address_ip` is failed", $value ]);
	}


	/**
	 * @param AddressIpV4|null $result
	 */
	public function address_ip_v4(&$result, $value): bool
	{
		if (Lib::type()->address_ip_v4($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `address_ip_v4` is failed", $value ]);
	}


	/**
	 * @param AddressIpV6|null $result
	 */
	public function address_ip_v6(&$result, $value): bool
	{
		if (Lib::type()->address_ip_v6($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `address_ip_v6` is failed", $value ]);
	}


	/**
	 * @param string|null $result
	 */
	public function address_mac(&$result, $value): bool
	{
		if (Lib::type()->address_mac($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `address_mac` is failed", $value ]);
	}


	/**
	 * @param SubnetV4|SubnetV6|null $result
	 */
	public function subnet(&$result, $value, ?string $ipFallback = null): bool
	{
		if (Lib::type()->subnet($result, $value, $ipFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `subnet` is failed", $value, $ipFallback ]);
	}


	/**
	 * @param SubnetV4|null $result
	 */
	public function subnet_v4(&$result, $value, ?string $ipFallback = null): bool
	{
		if (Lib::type()->subnet_v4($result, $value, $ipFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `subnet_v4` is failed", $value, $ipFallback ]);
	}


	/**
	 * @param SubnetV6|null $result
	 */
	public function subnet_v6(&$result, $value, ?string $ipFallback = null): bool
	{
		if (Lib::type()->subnet_v6($result, $value, $ipFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `subnet_v6` is failed", $value, $ipFallback ]);
	}


	/**
	 * @param string|null $result
	 */
	public function url(&$result, $value, $query = null, $fragment = null, array $refs = []): bool
	{
		if (Lib::type()->url($result, $value, $query, $fragment, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `url` is failed", $value, $query, $fragment, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function host(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->host($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `host` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function link(&$result, $value, $query = null, $fragment = null, array $refs = []): bool
	{
		if (Lib::type()->link($result, $value, $query, $fragment, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `link` is failed", $value, $query, $fragment, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function uuid(&$result, $value): bool
	{
		if (Lib::type()->uuid($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `uuid` is failed", $value ]);
	}


	/**
	 * @param array|\Countable|null $result
	 */
	public function countable(&$result, $value): bool
	{
		if (Lib::type()->countable($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `countable` is failed", $value ]);
	}


	/**
	 * @param \Countable|null $result
	 */
	public function countable_object(&$result, $value): bool
	{
		if (Lib::type()->countable_object($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `countable_object` is failed", $value ]);
	}


	/**
	 * @param string|array|\Countable|null $result
	 */
	public function sizeable(&$result, $value): bool
	{
		if (Lib::type()->sizeable($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `sizeable` is failed", $value ]);
	}


	/**
	 * @param \DateTimeZone|null $result
	 */
	public function timezone(&$result, $timezone, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->timezone($result, $timezone, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `timezone` is failed", $timezone, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTimeZone|null $result
	 */
	public function timezone_offset(&$result, $timezoneOrOffset): bool
	{
		if (Lib::type()->timezone_offset($result, $timezoneOrOffset)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `timezone_offset` is failed", $timezoneOrOffset ]);
	}


	/**
	 * @param \DateTimeZone|null $result
	 */
	public function timezone_abbr(&$result, $timezoneOrAbbr): bool
	{
		if (Lib::type()->timezone_abbr($result, $timezoneOrAbbr)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `timezone_abbr` is failed", $timezoneOrAbbr ]);
	}


	/**
	 * @param \DateTimeZone|null $result
	 */
	public function timezone_name(&$result, $timezoneOrName): bool
	{
		if (Lib::type()->timezone_name($result, $timezoneOrName)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `timezone_name` is failed", $timezoneOrName ]);
	}


	/**
	 * @param \DateTimeZone|null $result
	 */
	public function timezone_nameabbr(&$result, $timezoneOrNameOrAbbr): bool
	{
		if (Lib::type()->timezone_nameabbr($result, $timezoneOrNameOrAbbr)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `timezone_nameabbr` is failed", $timezoneOrNameOrAbbr ]);
	}


	/**
	 * @param \DateTimeInterface|null $result
	 */
	public function date(&$result, $datestring, $timezoneFallback = null): bool
	{
		if (Lib::type()->date($result, $datestring, $timezoneFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `date` is failed", $datestring, $timezoneFallback ]);
	}


	/**
	 * @param \DateTime|null $result
	 */
	public function adate(&$result, $datestring, $timezoneFallback = null): bool
	{
		if (Lib::type()->adate($result, $datestring, $timezoneFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `adate` is failed", $datestring, $timezoneFallback ]);
	}


	/**
	 * @param \DateTimeImmutable|null $result
	 */
	public function idate(&$result, $datestring, $timezoneFallback = null): bool
	{
		if (Lib::type()->idate($result, $datestring, $timezoneFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `idate` is failed", $datestring, $timezoneFallback ]);
	}


	/**
	 * @param \DateTimeInterface|null $result
	 */
	public function date_formatted(&$result, $dateFormatted, $formats, $timezoneFallback = null): bool
	{
		if (Lib::type()->date_formatted($result, $dateFormatted, $formats, $timezoneFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `date_formatted` is failed", $dateFormatted, $formats, $timezoneFallback ]);
	}


	/**
	 * @param \DateTime|null $result
	 */
	public function adate_formatted(&$result, $dateFormatted, $formats, $timezoneFallback = null): bool
	{
		if (Lib::type()->adate_formatted($result, $dateFormatted, $formats, $timezoneFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `adate_formatted` is failed", $dateFormatted, $formats, $timezoneFallback ]);
	}


	/**
	 * @param \DateTimeImmutable|null $result
	 */
	public function idate_formatted(&$result, $dateFormatted, $formats, $timezoneFallback = null): bool
	{
		if (Lib::type()->idate_formatted($result, $dateFormatted, $formats, $timezoneFallback)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `idate_formatted` is failed", $dateFormatted, $formats, $timezoneFallback ]);
	}


	/**
	 * @param \DateTimeInterface|null $result
	 */
	public function date_tz(&$result, $datestring, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->date_tz($result, $datestring, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `date_tz` is failed", $datestring, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTime|null $result
	 */
	public function adate_tz(&$result, $datestring, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->adate_tz($result, $datestring, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `adate_tz` is failed", $datestring, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTimeImmutable|null $result
	 */
	public function idate_tz(&$result, $datestring, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->idate_tz($result, $datestring, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `idate_tz` is failed", $datestring, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTimeInterface|null $result
	 */
	public function date_tz_formatted(&$result, $dateFormatted, $formats, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->date_tz_formatted($result, $dateFormatted, $formats, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `date_tz_formatted` is failed", $dateFormatted, $formats, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTime|null $result
	 */
	public function adate_tz_formatted(&$result, $dateFormatted, $formats, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->adate_tz_formatted($result, $dateFormatted, $formats, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `adate_tz_formatted` is failed", $dateFormatted, $formats, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTimeImmutable|null $result
	 */
	public function idate_tz_formatted(&$result, $dateFormatted, $formats, ?array $allowedTimezoneTypes = null): bool
	{
		if (Lib::type()->idate_tz_formatted($result, $dateFormatted, $formats, $allowedTimezoneTypes)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `idate_tz_formatted` is failed", $dateFormatted, $formats, $allowedTimezoneTypes ]);
	}


	/**
	 * @param \DateTimeInterface|null $result
	 */
	public function date_microtime(&$result, $microtime, $timezoneSet = null): bool
	{
		if (Lib::type()->date_microtime($result, $microtime, $timezoneSet)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `date_microtime` is failed", $microtime, $timezoneSet ]);
	}


	/**
	 * @param \DateTime|null $result
	 */
	public function adate_microtime(&$result, $microtime, $timezoneSet = null): bool
	{
		if (Lib::type()->adate_microtime($result, $microtime, $timezoneSet)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `adate_microtime` is failed", $microtime, $timezoneSet ]);
	}


	/**
	 * @param \DateTimeImmutable|null $result
	 */
	public function idate_microtime(&$result, $microtime, $timezoneSet = null): bool
	{
		if (Lib::type()->idate_microtime($result, $microtime, $timezoneSet)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `idate_microtime` is failed", $microtime, $timezoneSet ]);
	}


	/**
	 * @param \DateInterval|null $result
	 */
	public function interval(&$result, $interval): bool
	{
		if (Lib::type()->interval($result, $interval)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `interval` is failed", $interval ]);
	}


	/**
	 * @param \DateInterval|null $result
	 */
	public function interval_duration(&$result, $duration): bool
	{
		if (Lib::type()->interval_duration($result, $duration)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `interval_duration` is failed", $duration ]);
	}


	/**
	 * @param \DateInterval|null $result
	 */
	public function interval_datestring(&$result, $datestring): bool
	{
		if (Lib::type()->interval_datestring($result, $datestring)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `interval_datestring` is failed", $datestring ]);
	}


	/**
	 * @param \DateInterval|null $result
	 */
	public function interval_microtime(&$result, $microtime): bool
	{
		if (Lib::type()->interval_microtime($result, $microtime)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `interval_microtime` is failed", $microtime ]);
	}


	/**
	 * @param \DateInterval|null $result
	 */
	public function interval_ago(&$result, $date, ?\DateTimeInterface $from = null, ?bool $reverse = null): bool
	{
		if (Lib::type()->interval_ago($result, $date, $from, $reverse)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `interval_ago` is failed", $date, $from, $reverse ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|null    $result
	 * @param class-string<T>|T|mixed $value
	 */
	public function struct_exists(&$result, $value, ?int $flags = null)
	{
		if (Lib::type()->struct_exists($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_exists` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|null    $result
	 * @param class-string<T>|T|mixed $value
	 */
	public function struct(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|null    $result
	 * @param class-string<T>|T|mixed $value
	 */
	public function struct_class(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_class($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_class` is failed", $value, $flags ]);
	}


	/**
	 * @param class-string|null $result
	 */
	public function struct_interface(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_interface($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_interface` is failed", $value, $flags ]);
	}


	/**
	 * @param class-string|null $result
	 */
	public function struct_trait(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_trait($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_trait` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of \UnitEnum
	 *
	 * @param class-string<T>|null    $result
	 * @param class-string<T>|T|mixed $value
	 */
	public function struct_enum(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_enum($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_enum` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|null    $result
	 * @param class-string<T>|T|mixed $value
	 */
	public function struct_fqcn(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_fqcn($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_fqcn` is failed", $value, $flags ]);
	}


	/**
	 * @param string|null $result
	 */
	public function struct_namespace(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_namespace($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_namespace` is failed", $value, $flags ]);
	}


	/**
	 * @param string|null $result
	 */
	public function struct_basename(&$result, $value, ?int $flags = null): bool
	{
		if (Lib::type()->struct_basename($result, $value, $flags)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `struct_basename` is failed", $value, $flags ]);
	}


	/**
	 * @param resource|null $result
	 */
	public function resource(&$result, $value): bool
	{
		if (Lib::type()->resource($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `resource` is failed", $value ]);
	}


	/**
	 * @param resource|null $result
	 */
	public function any_not_resource(&$result, $value): bool
	{
		if (Lib::type()->any_not_resource($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `any_not_resource` is failed", $value ]);
	}


	/**
	 * @param resource|null $result
	 */
	public function resource_opened(&$result, $value): bool
	{
		if (Lib::type()->resource_opened($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `resource_opened` is failed", $value ]);
	}


	/**
	 * @param resource|null $result
	 */
	public function resource_closed(&$result, $value): bool
	{
		if (Lib::type()->resource_closed($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `resource_closed` is failed", $value ]);
	}


	/**
	 * @template-covariant T of \UnitEnum
	 *
	 * @param T|null               $result
	 * @param T|int|string         $value
	 * @param class-string<T>|null $enumClass
	 */
	public function enum_case(&$result, $value, ?string $enumClass = null): bool
	{
		if (Lib::type()->enum_case($result, $value, $enumClass)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `enum_case` is failed", $value, $enumClass ]);
	}


	/**
	 * @param array{ 0: class-string, 1: string }|null $result
	 */
	public function method_array(&$result, $value): bool
	{
		if (Lib::type()->method_array($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `method_array` is failed", $value ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function method_string(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->method_string($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `method_string` is failed", $value, $refs ]);
	}


	/**
	 * @param callable|null $result
	 * @param string|object $newScope
	 */
	public function callable(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|\Closure|object|null $result
	 */
	public function callable_object(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_object($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_object` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|object|null $result
	 */
	public function callable_object_closure(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_object_closure($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_object_closure` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|object|null $result
	 */
	public function callable_object_invokable(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_object_invokable($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_object_invokable` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|array{ 0: object|class-string, 1: string }|null $result
	 * @param string|object                                            $newScope
	 */
	public function callable_array(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_array($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_array` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|array{ 0: object|class-string, 1: string }|null $result
	 * @param string|object                                            $newScope
	 */
	public function callable_array_method(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_array_method($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_array_method` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|array{ 0: class-string, 1: string }|null $result
	 * @param string|object                                     $newScope
	 */
	public function callable_array_method_static(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_array_method_static($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_array_method_static` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable|array{ 0: object, 1: string }|null $result
	 * @param string|object                               $newScope
	 */
	public function callable_array_method_non_static(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_array_method_non_static($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_array_method_non_static` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable-string|null $result
	 */
	public function callable_string(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_string($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_string` is failed", $value, $newScope ]);
	}


	/**
	 * @param callable-string|null $result
	 */
	public function callable_string_function(&$result, $value): bool
	{
		if (Lib::type()->callable_string_function($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_string_function` is failed", $value ]);
	}


	/**
	 * @param callable-string|null $result
	 */
	public function callable_string_function_internal(&$result, $value): bool
	{
		if (Lib::type()->callable_string_function_internal($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_string_function_internal` is failed", $value ]);
	}


	/**
	 * @param callable-string|null $result
	 */
	public function callable_string_function_non_internal(&$result, $value): bool
	{
		if (Lib::type()->callable_string_function_non_internal($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_string_function_non_internal` is failed", $value ]);
	}


	/**
	 * @param callable-string|null $result
	 */
	public function callable_string_method_static(&$result, $value, $newScope = 'static'): bool
	{
		if (Lib::type()->callable_string_method_static($result, $value, $newScope)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `callable_string_method_static` is failed", $value, $newScope ]);
	}


	/**
	 * @template T
	 *
	 * @param mixed|T        $result
	 * @param int|string     $key
	 * @param array{ 0?: T } $set
	 */
	public function ref(&$result, $key, array $refs = [], array $set = []): bool
	{
		if (Lib::type()->ref($result, $key, $refs, $set)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `ref` is failed", $key, $refs, $set ]);
	}


	/**
	 * @param int|null $result
	 * @param string   $value
	 */
	public function chmod(&$result, $value): bool
	{
		if (Lib::type()->chmod($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `chmod` is failed", $value ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function path(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->path($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `path` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function realpath(&$result, $value, ?bool $allowSymlink = null, array $refs = []): bool
	{
		if (Lib::type()->realpath($result, $value, $allowSymlink, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `realpath` is failed", $value, $allowSymlink, $refs ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function freepath(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->freepath($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `freepath` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function dirpath(
		&$result,
		$value,
		?bool $allowExists = null,
		?bool $allowSymlink = null,
		array $refs = []
	): bool {
		if (Lib::type()->dirpath($result, $value, $allowExists, $allowSymlink, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `dirpath` is failed", $value, $allowExists, $allowSymlink, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function filepath(&$result, $value, ?bool $allowExists, ?bool $allowSymlink = null, array $refs = []): bool
	{
		if (Lib::type()->filepath($result, $value, $allowExists, $allowSymlink, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `filepath` is failed", $value, $allowExists, $allowSymlink, $refs ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function dirpath_realpath(&$result, $value, ?bool $allowSymlink = null, array $refs = []): bool
	{
		if (Lib::type()->dirpath_realpath($result, $value, $allowSymlink, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `dirpath_realpath` is failed", $value, $allowSymlink, $refs ]);
	}


	/**
	 * @param string|null            $result
	 * @param array{ 0: array|null } $refs
	 */
	public function filepath_realpath(&$result, $value, ?bool $allowSymlink = null, array $refs = []): bool
	{
		if (Lib::type()->filepath_realpath($result, $value, $allowSymlink, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `filepath_realpath` is failed", $value, $allowSymlink, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function filename(&$result, $value): bool
	{
		if (Lib::type()->filename($result, $value)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `filename` is failed", $value ]);
	}


	/**
	 * @param \SplFileInfo|null $result
	 */
	public function file(
		&$result,
		$value,
		?array $extensions = null,
		?array $mimeTypes = null,
		?array $filters = null
	): bool {
		if (Lib::type()->file($result, $value, $extensions, $mimeTypes, $filters)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `file` is failed", $value, $extensions, $mimeTypes, $filters ]);
	}


	/**
	 * @param \SplFileInfo|null $result
	 */
	public function image(
		&$result,
		$value,
		?array $extensions = null,
		?array $mimeTypes = null,
		?array $filters = null
	): bool {
		if (Lib::type()->image($result, $value, $extensions, $mimeTypes, $filters)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `image` is failed", $value, $extensions, $mimeTypes, $filters ]);
	}


	/**
	 * @param string|null $result
	 */
	public function email(&$result, $value, ?array $filters = null, array $refs = []): bool
	{
		if (Lib::type()->email($result, $value, $filters, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `email` is failed", $value, $filters, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function email_fake(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->email_fake($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `email_fake` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function email_non_fake(&$result, $value, ?array $filters = null, array $refs = []): bool
	{
		if (Lib::type()->email_non_fake($result, $value, $filters, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `email_non_fake` is failed", $value, $filters, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function phone(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->phone($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `phone` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function phone_fake(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->phone_fake($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `phone_fake` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function phone_non_fake(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->phone_non_fake($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `phone_non_fake` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function phone_real(&$result, $value, ?string $region = '', array $refs = []): bool
	{
		if (Lib::type()->phone_real($result, $value, $region, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `phone_real` is failed", $value, $region, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function tel(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->tel($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `tel` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function tel_fake(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->tel_fake($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `tel_fake` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function tel_non_fake(&$result, $value, array $refs = []): bool
	{
		if (Lib::type()->tel_non_fake($result, $value, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `tel_non_fake` is failed", $value, $refs ]);
	}


	/**
	 * @param string|null $result
	 */
	public function tel_real(&$result, $value, ?string $region = '', array $refs = []): bool
	{
		if (Lib::type()->tel_real($result, $value, $region, $refs)) {
		    return true;
		}

		throw new LogicException([ "Typecheck `tel_real` is failed", $value, $region, $refs ]);
	}
}
