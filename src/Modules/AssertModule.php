<?php

/**
 * This class is autogenerated.
 */

namespace Gzhegow\Lib\Modules;

use Gzhegow\Lib\Lib;
use Gzhegow\Lib\Modules\Type\Base\AssertModuleBase;

class AssertModule extends AssertModuleBase
{
	/**
	 * @return static
	 */
	public function bool()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->bool(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function userbool()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->userbool(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function int()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->int(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function int_non_zero()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->int_non_zero(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function int_non_negative()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->int_non_negative(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function int_non_positive()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->int_non_positive(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function int_negative()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->int_negative(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function int_positive()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->int_positive(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function float()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->float(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function float_non_zero()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->float_non_zero(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function float_non_negative()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->float_non_negative(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function float_non_positive()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->float_non_positive(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function float_negative()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->float_negative(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function float_positive()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->float_positive(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function num()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->num(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function num_non_zero()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->num_non_zero(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function num_non_negative()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->num_non_negative(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function num_non_positive()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->num_non_positive(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function num_negative()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->num_negative(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function num_positive()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->num_positive(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric(?bool $isAllowExp = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $isAllowExp, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric(
		        $this->result,
		        $this->result ?? $this->value,
		        $isAllowExp, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_non_zero(?bool $allowExp = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExp, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_non_zero(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExp, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_non_negative(?bool $allowExp = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExp, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_non_negative(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExp, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_non_positive(?bool $allowExp = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExp, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_non_positive(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExp, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_negative(?bool $allowExp = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExp, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_negative(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExp, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_positive(?bool $allowExp = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExp, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_positive(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExp, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_int(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_int(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_int_non_zero(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_int_non_zero(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_int_non_negative(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_int_non_negative(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_int_non_positive(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_int_non_positive(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_int_negative(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_int_negative(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function numeric_int_positive(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->numeric_int_positive(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function number(?bool $allowExp = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExp ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->number(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExp
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function bcnumber()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->bcnumber(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function string()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->string(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function string_not_empty()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->string_not_empty(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function trim(?string $characters = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $characters ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->trim(
		        $this->result,
		        $this->result ?? $this->value,
		        $characters
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function char()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->char(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function letter()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->letter(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function alphabet()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->alphabet(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function ctype_digit()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->ctype_digit(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function ctype_alpha(?bool $isIgnoreCase = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $isIgnoreCase ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->ctype_alpha(
		        $this->result,
		        $this->result ?? $this->value,
		        $isIgnoreCase
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function ctype_alnum(?bool $isIgnoreCase = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $isIgnoreCase ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->ctype_alnum(
		        $this->result,
		        $this->result ?? $this->value,
		        $isIgnoreCase
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function base($alphabet)
	{
		$this->fnList[] = [ __FUNCTION__, [ $alphabet ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->base(
		        $this->result,
		        $this->result ?? $this->value,
		        $alphabet
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function base_bin()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->base_bin(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function base_oct()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->base_oct(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function base_dec()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->base_dec(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function base_hex()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->base_hex(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function list()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->list(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function list_sorted()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->list_sorted(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function dict()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->dict(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function dict_sorted()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->dict_sorted(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function index_list()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->index_list(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function index_dict()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->index_dict(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function table()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->table(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function matrix()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->matrix(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function matrix_strict()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->matrix_strict(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function arrpath(?string $dot = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dot ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->arrpath(
		        $this->result,
		        $this->result ?? $this->value,
		        $dot
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function regex()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->regex(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function address_ip()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->address_ip(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function address_ip_v4()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->address_ip_v4(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function address_ip_v6()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->address_ip_v6(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function address_mac()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->address_mac(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function subnet(?string $ipFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $ipFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->subnet(
		        $this->result,
		        $this->result ?? $this->value,
		        $ipFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function subnet_v4(?string $ipFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $ipFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->subnet_v4(
		        $this->result,
		        $this->result ?? $this->value,
		        $ipFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function subnet_v6(?string $ipFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $ipFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->subnet_v6(
		        $this->result,
		        $this->result ?? $this->value,
		        $ipFallback
		    );
		}

		return $this;
	}


	/**
	 * @param string            $value
	 * @param string|array|null $query
	 * @param string|null       $fragment
	 *
	 * @return static
	 */
	public function url($query = null, $fragment = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $query, $fragment, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->url(
		        $this->result,
		        $this->result ?? $this->value,
		        $query, $fragment, $refs
		    );
		}

		return $this;
	}


	/**
	 * @param string      $value
	 *
	 * @return static
	 */
	public function host(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->host(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @param string            $value
	 * @param string|array|null $query
	 * @param string|null       $fragment
	 *
	 * @return static
	 */
	public function link($query = null, $fragment = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $query, $fragment, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->link(
		        $this->result,
		        $this->result ?? $this->value,
		        $query, $fragment, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function uuid()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->uuid(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function countable()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->countable(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function countable_object()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->countable_object(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function sizeable()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->sizeable(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function timezone(?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->timezone(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function timezone_offset()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->timezone_offset(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function timezone_abbr()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->timezone_abbr(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function timezone_name()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->timezone_name(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function timezone_nameabbr()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->timezone_nameabbr(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function date($timezoneFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $timezoneFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->date(
		        $this->result,
		        $this->result ?? $this->value,
		        $timezoneFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function adate($timezoneFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $timezoneFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->adate(
		        $this->result,
		        $this->result ?? $this->value,
		        $timezoneFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function idate($timezoneFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $timezoneFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->idate(
		        $this->result,
		        $this->result ?? $this->value,
		        $timezoneFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function date_formatted($dateFormatted, $timezoneFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dateFormatted, $timezoneFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->date_formatted(
		        $this->result,
		        $this->result ?? $this->value,
		        $dateFormatted, $timezoneFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function adate_formatted($dateFormatted, $timezoneFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dateFormatted, $timezoneFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->adate_formatted(
		        $this->result,
		        $this->result ?? $this->value,
		        $dateFormatted, $timezoneFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function idate_formatted($dateFormatted, $timezoneFallback = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dateFormatted, $timezoneFallback ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->idate_formatted(
		        $this->result,
		        $this->result ?? $this->value,
		        $dateFormatted, $timezoneFallback
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function date_tz(?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->date_tz(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function adate_tz(?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->adate_tz(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function idate_tz(?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->idate_tz(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function date_tz_formatted($dateFormatted, ?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dateFormatted, $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->date_tz_formatted(
		        $this->result,
		        $this->result ?? $this->value,
		        $dateFormatted, $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function adate_tz_formatted($dateFormatted, ?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dateFormatted, $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->adate_tz_formatted(
		        $this->result,
		        $this->result ?? $this->value,
		        $dateFormatted, $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function idate_tz_formatted($dateFormatted, ?array $allowedTimezoneTypes = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $dateFormatted, $allowedTimezoneTypes ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->idate_tz_formatted(
		        $this->result,
		        $this->result ?? $this->value,
		        $dateFormatted, $allowedTimezoneTypes
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function date_microtime($timezoneSet = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $timezoneSet ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->date_microtime(
		        $this->result,
		        $this->result ?? $this->value,
		        $timezoneSet
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function adate_microtime($timezoneSet = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $timezoneSet ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->adate_microtime(
		        $this->result,
		        $this->result ?? $this->value,
		        $timezoneSet
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function idate_microtime($timezoneSet = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $timezoneSet ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->idate_microtime(
		        $this->result,
		        $this->result ?? $this->value,
		        $timezoneSet
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function interval()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->interval(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function interval_duration()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->interval_duration(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function interval_datestring()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->interval_datestring(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function interval_microtime()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->interval_microtime(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function interval_ago(?\DateTimeInterface $from = null, ?bool $reverse = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $from, $reverse ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->interval_ago(
		        $this->result,
		        $this->result ?? $this->value,
		        $from, $reverse
		    );
		}

		return $this;
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return static
	 */
	public function struct_exists(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_exists(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return static
	 */
	public function struct(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return static
	 */
	public function struct_class(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_class(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function struct_interface(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_interface(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function struct_trait(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_trait(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @template-covariant T of \UnitEnum
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return static
	 */
	public function struct_enum(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_enum(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return static
	 */
	public function struct_fqcn(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_fqcn(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function struct_namespace(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_namespace(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function struct_basename(?int $flags = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $flags ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->struct_basename(
		        $this->result,
		        $this->result ?? $this->value,
		        $flags
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function resource()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->resource(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function resource_opened()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->resource_opened(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function resource_closed()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->resource_closed(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @template-covariant T of \UnitEnum
	 *
	 * @param T|int|string         $value
	 * @param class-string<T>|null $enumClass
	 *
	 * @return static
	 */
	public function enum_case(?string $enumClass = null)
	{
		$this->fnList[] = [ __FUNCTION__, [ $enumClass ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->enum_case(
		        $this->result,
		        $this->result ?? $this->value,
		        $enumClass
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function method_array()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->method_array(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return static
	 */
	public function method_string(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->method_string(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @param string|object $newScope
	 *
	 * @return static
	 */
	public function callable($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_object($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_object(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_object_closure($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_object_closure(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_object_invokable($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_object_invokable(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @param string|object                                            $newScope
	 *
	 * @return static
	 */
	public function callable_array($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_array(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @param string|object                                            $newScope
	 *
	 * @return static
	 */
	public function callable_array_method($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_array_method(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @param string|object                                     $newScope
	 *
	 * @return static
	 */
	public function callable_array_method_static($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_array_method_static(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @param string|object                               $newScope
	 *
	 * @return static
	 */
	public function callable_array_method_non_static($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_array_method_non_static(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_string($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_string(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_string_function()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_string_function(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_string_function_internal()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_string_function_internal(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_string_function_non_internal()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_string_function_non_internal(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function callable_string_method_static($newScope = 'static')
	{
		$this->fnList[] = [ __FUNCTION__, [ $newScope ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->callable_string_method_static(
		        $this->result,
		        $this->result ?? $this->value,
		        $newScope
		    );
		}

		return $this;
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return static
	 */
	public function path(array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->path(
		        $this->result,
		        $this->result ?? $this->value,
		        $refs
		    );
		}

		return $this;
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return static
	 */
	public function realpath(?bool $allowSymlink = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowSymlink, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->realpath(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowSymlink, $refs
		    );
		}

		return $this;
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return static
	 */
	public function dirpath(?bool $allowExists = null, ?bool $allowSymlink = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExists, $allowSymlink, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->dirpath(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExists, $allowSymlink, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function filepath(?bool $allowExists = null, ?bool $allowSymlink = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowExists, $allowSymlink, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->filepath(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowExists, $allowSymlink, $refs
		    );
		}

		return $this;
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return static
	 */
	public function dirpath_realpath(?bool $allowSymlink = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowSymlink, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->dirpath_realpath(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowSymlink, $refs
		    );
		}

		return $this;
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return static
	 */
	public function filepath_realpath(?bool $allowSymlink = null, array $refs = [])
	{
		$this->fnList[] = [ __FUNCTION__, [ $allowSymlink, $refs ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->filepath_realpath(
		        $this->result,
		        $this->result ?? $this->value,
		        $allowSymlink, $refs
		    );
		}

		return $this;
	}


	/**
	 * @return static
	 */
	public function filename()
	{
		$this->fnList[] = [ __FUNCTION__, [  ] ];

		if (false !== $this->status) {
		    $this->status = Lib::type()->filename(
		        $this->result,
		        $this->result ?? $this->value,

		    );
		}

		return $this;
	}
}
