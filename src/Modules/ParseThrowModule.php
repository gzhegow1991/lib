<?php

/**
 * This class is autogenerated.
 */

namespace Gzhegow\Lib\Modules;

use Gzhegow\Lib\Exception\LogicException;
use Gzhegow\Lib\Lib;
use Gzhegow\Lib\Modules\Arr\ArrPath;
use Gzhegow\Lib\Modules\Bcmath\Bcnumber;
use Gzhegow\Lib\Modules\Bcmath\Number;
use Gzhegow\Lib\Modules\Net\AddressIpV4;
use Gzhegow\Lib\Modules\Net\AddressIpV6;
use Gzhegow\Lib\Modules\Net\SubnetV4;
use Gzhegow\Lib\Modules\Net\SubnetV6;
use Gzhegow\Lib\Modules\Php\Nil;
use Gzhegow\Lib\Modules\Str\Alphabet;

class ParseThrowModule
{
	/**
	 * @return mixed|null
	 */
	public function empty($value)
	{
		if (Lib::type()->empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `empty` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_empty($value)
	{
		if (Lib::type()->any_not_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_empty` is failed", $value ]);
	}


	/**
	 * > Специальный тип, который значит, что значение можно отбросить или не учитывать, т.к. оно не несёт информации
	 *
	 * @return string|array|\Countable|null
	 */
	public function blank($value)
	{
		if (Lib::type()->blank($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `blank` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_blank($value)
	{
		if (Lib::type()->any_not_blank($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_blank` is failed", $value ]);
	}


	/**
	 * > Специальный тип, который значит, что значение можно заменить NULL-ом
	 *
	 * @return mixed|null
	 */
	public function nullable($value)
	{
		if (Lib::type()->nullable($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `nullable` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_nullable($value)
	{
		if (Lib::type()->any_not_nullable($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_nullable` is failed", $value ]);
	}


	/**
	 * > Специальный тип, который значит, что значение было отправлено пользователем, а не появилось из PHP
	 *
	 * @return mixed|null
	 */
	public function passed($value)
	{
		if (Lib::type()->passed($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `passed` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_passed($value)
	{
		if (Lib::type()->any_not_passed($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_passed` is failed", $value ]);
	}


	/**
	 * > Специальный тип-синоним NULL, переданный пользователем через API, например '{N}'
	 * > в случаях, когда NULL интерпретируется как "не трогать", а NIL как "очистить"
	 *
	 * > NAN не равен ничему даже самому себе
	 * > NIL равен только самому себе
	 * > NULL означает пустоту и им можно заменить значения '', [], `resource (closed)`, NIL, но нельзя заменить NAN
	 *
	 * @return string|Nil|null
	 */
	public function nil($value)
	{
		if (Lib::type()->nil($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `nil` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_nil($value)
	{
		if (Lib::type()->any_not_nil($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_nil` is failed", $value ]);
	}


	/**
	 * @return null
	 */
	public function a_null($value)
	{
		if (Lib::type()->a_null($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_null` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_null($value)
	{
		if (Lib::type()->any_not_null($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_null` is failed", $value ]);
	}


	/**
	 * @return bool|null
	 */
	public function a_bool($value)
	{
		if (Lib::type()->a_bool($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_bool` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function an_any_not_bool($value)
	{
		if (Lib::type()->an_any_not_bool($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `an_any_not_bool` is failed", $value ]);
	}


	/**
	 * @return false|null
	 */
	public function a_false($value)
	{
		if (Lib::type()->a_false($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_false` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_false($value)
	{
		if (Lib::type()->any_not_false($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_false` is failed", $value ]);
	}


	/**
	 * @return true|null
	 */
	public function a_true($value)
	{
		if (Lib::type()->a_true($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_true` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_true($value)
	{
		if (Lib::type()->any_not_true($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_true` is failed", $value ]);
	}


	/**
	 * @return bool|null
	 */
	public function bool($value)
	{
		if (Lib::type()->bool($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `bool` is failed", $value ]);
	}


	/**
	 * @return false|null
	 */
	public function false($value)
	{
		if (Lib::type()->false($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `false` is failed", $value ]);
	}


	/**
	 * @return false|null
	 */
	public function true($value)
	{
		if (Lib::type()->true($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `true` is failed", $value ]);
	}


	/**
	 * @return bool|null
	 */
	public function userbool($value)
	{
		if (Lib::type()->userbool($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `userbool` is failed", $value ]);
	}


	/**
	 * @return false|null
	 */
	public function userfalse($value)
	{
		if (Lib::type()->userfalse($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `userfalse` is failed", $value ]);
	}


	/**
	 * @return false|null
	 */
	public function usertrue($value)
	{
		if (Lib::type()->usertrue($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `usertrue` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function nan($value)
	{
		if (Lib::type()->nan($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `nan` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_not_nan($value)
	{
		if (Lib::type()->float_not_nan($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_not_nan` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_nan($value)
	{
		if (Lib::type()->any_not_nan($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_nan` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function finite($value)
	{
		if (Lib::type()->finite($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `finite` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_not_finite($value)
	{
		if (Lib::type()->float_not_finite($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_not_finite` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_finite($value)
	{
		if (Lib::type()->any_not_finite($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_finite` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function infinite($value)
	{
		if (Lib::type()->infinite($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `infinite` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_not_infinite($value)
	{
		if (Lib::type()->float_not_infinite($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_not_infinite` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_infinite($value)
	{
		if (Lib::type()->any_not_infinite($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_infinite` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric($value, ?bool $isAllowExp = null, array $refs = [])
	{
		if (Lib::type()->numeric($result, $value, $isAllowExp, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric` is failed", $value, $isAllowExp, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_non_zero($value, ?bool $allowExp = null, array $refs = [])
	{
		if (Lib::type()->numeric_non_zero($result, $value, $allowExp, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_non_zero` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_non_negative($value, ?bool $allowExp = null, array $refs = [])
	{
		if (Lib::type()->numeric_non_negative($result, $value, $allowExp, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_non_negative` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_non_positive($value, ?bool $allowExp = null, array $refs = [])
	{
		if (Lib::type()->numeric_non_positive($result, $value, $allowExp, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_non_positive` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_negative($value, ?bool $allowExp = null, array $refs = [])
	{
		if (Lib::type()->numeric_negative($result, $value, $allowExp, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_negative` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_positive($value, ?bool $allowExp = null, array $refs = [])
	{
		if (Lib::type()->numeric_positive($result, $value, $allowExp, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_positive` is failed", $value, $allowExp, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int($value, array $refs = [])
	{
		if (Lib::type()->numeric_int($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_non_zero($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_non_zero($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_non_zero` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_non_negative($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_non_negative($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_non_negative` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_non_positive($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_non_positive($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_non_positive` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_negative($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_negative($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_negative` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_positive($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_positive($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_positive` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_positive_or_minus_one($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_positive_or_minus_one($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_positive_or_minus_one` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_int_non_negative_or_minus_one($value, array $refs = [])
	{
		if (Lib::type()->numeric_int_non_negative_or_minus_one($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_int_non_negative_or_minus_one` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_float($value, array $refs = [])
	{
		if (Lib::type()->numeric_float($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_float` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_float_non_zero($value, array $refs = [])
	{
		if (Lib::type()->numeric_float_non_zero($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_float_non_zero` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_float_non_negative($value, array $refs = [])
	{
		if (Lib::type()->numeric_float_non_negative($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_float_non_negative` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_float_non_positive($value, array $refs = [])
	{
		if (Lib::type()->numeric_float_non_positive($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_float_non_positive` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_float_negative($value, array $refs = [])
	{
		if (Lib::type()->numeric_float_negative($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_float_negative` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function numeric_float_positive($value, array $refs = [])
	{
		if (Lib::type()->numeric_float_positive($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `numeric_float_positive` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function decimal($value, int $scale = 0, array $refs = [])
	{
		if (Lib::type()->decimal($result, $value, $scale, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `decimal` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function decimal_non_zero($value, int $scale = 0, array $refs = [])
	{
		if (Lib::type()->decimal_non_zero($result, $value, $scale, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `decimal_non_zero` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function decimal_non_negative($value, int $scale = 0, array $refs = [])
	{
		if (Lib::type()->decimal_non_negative($result, $value, $scale, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `decimal_non_negative` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function decimal_non_positive($value, int $scale = 0, array $refs = [])
	{
		if (Lib::type()->decimal_non_positive($result, $value, $scale, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `decimal_non_positive` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function decimal_negative($value, int $scale = 0, array $refs = [])
	{
		if (Lib::type()->decimal_negative($result, $value, $scale, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `decimal_negative` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function decimal_positive($value, int $scale = 0, array $refs = [])
	{
		if (Lib::type()->decimal_positive($result, $value, $scale, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `decimal_positive` is failed", $value, $scale, $refs ]);
	}


	/**
	 * @return int|float|null
	 */
	public function num($value)
	{
		if (Lib::type()->num($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `num` is failed", $value ]);
	}


	/**
	 * @return int|float|null
	 */
	public function num_non_zero($value)
	{
		if (Lib::type()->num_non_zero($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `num_non_zero` is failed", $value ]);
	}


	/**
	 * @return int|float|null
	 */
	public function num_non_negative($value)
	{
		if (Lib::type()->num_non_negative($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `num_non_negative` is failed", $value ]);
	}


	/**
	 * @return int|float|null
	 */
	public function num_non_positive($value)
	{
		if (Lib::type()->num_non_positive($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `num_non_positive` is failed", $value ]);
	}


	/**
	 * @return int|float|null
	 */
	public function num_negative($value)
	{
		if (Lib::type()->num_negative($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `num_negative` is failed", $value ]);
	}


	/**
	 * @return int|float|null
	 */
	public function num_positive($value)
	{
		if (Lib::type()->num_positive($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `num_positive` is failed", $value ]);
	}


	/**
	 * @return int|null
	 */
	public function int($value)
	{
		if (Lib::type()->int($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int` is failed", $value ]);
	}


	/**
	 * @return int|null
	 */
	public function int_non_zero($value)
	{
		if (Lib::type()->int_non_zero($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_non_zero` is failed", $value ]);
	}


	/**
	 * @return int|null
	 */
	public function int_non_negative($value)
	{
		if (Lib::type()->int_non_negative($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_non_negative` is failed", $value ]);
	}


	/**
	 * @return int|null
	 */
	public function int_non_positive($value)
	{
		if (Lib::type()->int_non_positive($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_non_positive` is failed", $value ]);
	}


	/**
	 * @return int|null
	 */
	public function int_negative($value)
	{
		if (Lib::type()->int_negative($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_negative` is failed", $value ]);
	}


	/**
	 * @return int|null
	 */
	public function int_positive($value)
	{
		if (Lib::type()->int_positive($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_positive` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function int_positive_or_minus_one($value)
	{
		if (Lib::type()->int_positive_or_minus_one($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_positive_or_minus_one` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function int_non_negative_or_minus_one($value)
	{
		if (Lib::type()->int_non_negative_or_minus_one($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `int_non_negative_or_minus_one` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float($value)
	{
		if (Lib::type()->float($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_non_zero($value)
	{
		if (Lib::type()->float_non_zero($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_non_zero` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_non_negative($value)
	{
		if (Lib::type()->float_non_negative($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_non_negative` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_non_positive($value)
	{
		if (Lib::type()->float_non_positive($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_non_positive` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_negative($value)
	{
		if (Lib::type()->float_negative($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_negative` is failed", $value ]);
	}


	/**
	 * @return float|null
	 */
	public function float_positive($value)
	{
		if (Lib::type()->float_positive($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `float_positive` is failed", $value ]);
	}


	/**
	 * @return Number|null
	 */
	public function number($value, ?bool $allowExp = null)
	{
		if (Lib::type()->number($result, $value, $allowExp)) {
		    return $result;
		}

		throw new LogicException([ "Filter `number` is failed", $value, $allowExp ]);
	}


	/**
	 * @return Bcnumber|null
	 */
	public function bcnumber($value)
	{
		if (Lib::type()->bcnumber($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `bcnumber` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function a_string($value)
	{
		if (Lib::type()->a_string($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_string` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function a_string_empty($value)
	{
		if (Lib::type()->a_string_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_string_empty` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function a_string_not_empty($value)
	{
		if (Lib::type()->a_string_not_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_string_not_empty` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function a_trim($value)
	{
		if (Lib::type()->a_trim($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `a_trim` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function string($value)
	{
		if (Lib::type()->string($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `string` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function string_empty($value)
	{
		if (Lib::type()->string_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `string_empty` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function string_not_empty($value)
	{
		if (Lib::type()->string_not_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `string_not_empty` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function trim($value, ?string $characters = null)
	{
		if (Lib::type()->trim($result, $value, $characters)) {
		    return $result;
		}

		throw new LogicException([ "Filter `trim` is failed", $value, $characters ]);
	}


	/**
	 * @return string|null
	 */
	public function char($value)
	{
		if (Lib::type()->char($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `char` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function letter($value)
	{
		if (Lib::type()->letter($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `letter` is failed", $value ]);
	}


	/**
	 * @return Alphabet|null
	 */
	public function alphabet($value)
	{
		if (Lib::type()->alphabet($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `alphabet` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function ctype_digit($value)
	{
		if (Lib::type()->ctype_digit($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `ctype_digit` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function ctype_alpha($value, ?bool $isIgnoreCase = null)
	{
		if (Lib::type()->ctype_alpha($result, $value, $isIgnoreCase)) {
		    return $result;
		}

		throw new LogicException([ "Filter `ctype_alpha` is failed", $value, $isIgnoreCase ]);
	}


	/**
	 * @return string|null
	 */
	public function ctype_alnum($value, ?bool $isIgnoreCase = null)
	{
		if (Lib::type()->ctype_alnum($result, $value, $isIgnoreCase)) {
		    return $result;
		}

		throw new LogicException([ "Filter `ctype_alnum` is failed", $value, $isIgnoreCase ]);
	}


	/**
	 * @return string|null
	 */
	public function base($value, $alphabet)
	{
		if (Lib::type()->base($result, $value, $alphabet)) {
		    return $result;
		}

		throw new LogicException([ "Filter `base` is failed", $value, $alphabet ]);
	}


	/**
	 * @return string|null
	 */
	public function base_bin($value)
	{
		if (Lib::type()->base_bin($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `base_bin` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function base_oct($value)
	{
		if (Lib::type()->base_oct($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `base_oct` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function base_dec($value)
	{
		if (Lib::type()->base_dec($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `base_dec` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function base_hex($value)
	{
		if (Lib::type()->base_hex($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `base_hex` is failed", $value ]);
	}


	/**
	 * @return array|null
	 */
	public function array_empty($value)
	{
		if (Lib::type()->array_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_empty` is failed", $value ]);
	}


	/**
	 * @return array|null
	 */
	public function array_not_empty($value)
	{
		if (Lib::type()->array_not_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_not_empty` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function any_not_array_empty($value)
	{
		if (Lib::type()->any_not_array_empty($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_array_empty` is failed", $value ]);
	}


	/**
	 * @return mixed|null
	 */
	public function key_exists($value, $key)
	{
		if (Lib::type()->key_exists($result, $value, $key)) {
		    return $result;
		}

		throw new LogicException([ "Filter `key_exists` is failed", $value, $key ]);
	}


	/**
	 * @return array|null
	 */
	public function array_plain($value)
	{
		if (Lib::type()->array_plain($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_plain` is failed", $value ]);
	}


	/**
	 * @return array|null
	 */
	public function list($value, ?bool $isPlain = null)
	{
		if (Lib::type()->list($result, $value, $isPlain)) {
		    return $result;
		}

		throw new LogicException([ "Filter `list` is failed", $value, $isPlain ]);
	}


	/**
	 * @return array|null
	 */
	public function list_sorted($value, ?bool $isPlain = null)
	{
		if (Lib::type()->list_sorted($result, $value, $isPlain)) {
		    return $result;
		}

		throw new LogicException([ "Filter `list_sorted` is failed", $value, $isPlain ]);
	}


	/**
	 * @return array|null
	 */
	public function dict($value, ?bool $isPlain = null)
	{
		if (Lib::type()->dict($result, $value, $isPlain)) {
		    return $result;
		}

		throw new LogicException([ "Filter `dict` is failed", $value, $isPlain ]);
	}


	/**
	 * @return array|null
	 */
	public function dict_sorted($value, ?bool $isPlain = null)
	{
		if (Lib::type()->dict_sorted($result, $value, $isPlain)) {
		    return $result;
		}

		throw new LogicException([ "Filter `dict_sorted` is failed", $value, $isPlain ]);
	}


	/**
	 * @return array|null
	 */
	public function table($value)
	{
		if (Lib::type()->table($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `table` is failed", $value ]);
	}


	/**
	 * @return array|null
	 */
	public function matrix($value)
	{
		if (Lib::type()->matrix($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `matrix` is failed", $value ]);
	}


	/**
	 * @return array|null
	 */
	public function matrix_strict($value)
	{
		if (Lib::type()->matrix_strict($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `matrix_strict` is failed", $value ]);
	}


	/**
	 * @return ArrPath|null
	 */
	public function arrpath($path, ?string $dot = null)
	{
		if (Lib::type()->arrpath($result, $path, $dot)) {
		    return $result;
		}

		throw new LogicException([ "Filter `arrpath` is failed", $path, $dot ]);
	}


	/**
	 * @return array|null
	 */
	public function array_of_type($value, string $type)
	{
		if (Lib::type()->array_of_type($result, $value, $type)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_of_type` is failed", $value, $type ]);
	}


	/**
	 * @return resource[]|null
	 */
	public function array_of_resource_type($value, string $resourceType)
	{
		if (Lib::type()->array_of_resource_type($result, $value, $resourceType)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_of_resource_type` is failed", $value, $resourceType ]);
	}


	/**
	 * @template T
	 *
	 * @param class-string<T> $className
	 *
	 * @return T[]
	 */
	public function array_of_a($value, string $className)
	{
		if (Lib::type()->array_of_a($result, $value, $className)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_of_a` is failed", $value, $className ]);
	}


	/**
	 * @template T
	 *
	 * @param class-string<T> $className
	 *
	 * @return T[]
	 */
	public function array_of_class($value, string $className)
	{
		if (Lib::type()->array_of_class($result, $value, $className)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_of_class` is failed", $value, $className ]);
	}


	/**
	 * @template T
	 *
	 * @param class-string<T> $className
	 *
	 * @return T[]
	 */
	public function array_of_subclass($value, string $className)
	{
		if (Lib::type()->array_of_subclass($result, $value, $className)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_of_subclass` is failed", $value, $className ]);
	}


	/**
	 * @return array|null
	 */
	public function array_of_callback($value, callable $fn, array $args = [])
	{
		if (Lib::type()->array_of_callback($result, $value, $fn, $args)) {
		    return $result;
		}

		throw new LogicException([ "Filter `array_of_callback` is failed", $value, $fn, $args ]);
	}


	/**
	 * @return string|null
	 */
	public function regex($value)
	{
		if (Lib::type()->regex($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `regex` is failed", $value ]);
	}


	/**
	 * @return AddressIpV4|AddressIpV6|null
	 */
	public function address_ip($value)
	{
		if (Lib::type()->address_ip($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `address_ip` is failed", $value ]);
	}


	/**
	 * @return AddressIpV4|null
	 */
	public function address_ip_v4($value)
	{
		if (Lib::type()->address_ip_v4($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `address_ip_v4` is failed", $value ]);
	}


	/**
	 * @return AddressIpV6|null
	 */
	public function address_ip_v6($value)
	{
		if (Lib::type()->address_ip_v6($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `address_ip_v6` is failed", $value ]);
	}


	/**
	 * @return string|null
	 */
	public function address_mac($value)
	{
		if (Lib::type()->address_mac($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `address_mac` is failed", $value ]);
	}


	/**
	 * @return SubnetV4|SubnetV6|null
	 */
	public function subnet($value, ?string $ipFallback = null)
	{
		if (Lib::type()->subnet($result, $value, $ipFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `subnet` is failed", $value, $ipFallback ]);
	}


	/**
	 * @return SubnetV4|null
	 */
	public function subnet_v4($value, ?string $ipFallback = null)
	{
		if (Lib::type()->subnet_v4($result, $value, $ipFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `subnet_v4` is failed", $value, $ipFallback ]);
	}


	/**
	 * @return SubnetV6|null
	 */
	public function subnet_v6($value, ?string $ipFallback = null)
	{
		if (Lib::type()->subnet_v6($result, $value, $ipFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `subnet_v6` is failed", $value, $ipFallback ]);
	}


	/**
	 * @return string|null
	 */
	public function url($value, $query = null, $fragment = null, array $refs = [])
	{
		if (Lib::type()->url($result, $value, $query, $fragment, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `url` is failed", $value, $query, $fragment, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function host($value, array $refs = [])
	{
		if (Lib::type()->host($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `host` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function link($value, $query = null, $fragment = null, array $refs = [])
	{
		if (Lib::type()->link($result, $value, $query, $fragment, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `link` is failed", $value, $query, $fragment, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function uuid($value)
	{
		if (Lib::type()->uuid($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `uuid` is failed", $value ]);
	}


	/**
	 * @return array|\Countable|null
	 */
	public function countable($value)
	{
		if (Lib::type()->countable($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `countable` is failed", $value ]);
	}


	/**
	 * @return \Countable|null
	 */
	public function countable_object($value)
	{
		if (Lib::type()->countable_object($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `countable_object` is failed", $value ]);
	}


	/**
	 * @return string|array|\Countable|null
	 */
	public function sizeable($value)
	{
		if (Lib::type()->sizeable($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `sizeable` is failed", $value ]);
	}


	/**
	 * @return \DateTimeZone|null
	 */
	public function timezone($timezone, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->timezone($result, $timezone, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `timezone` is failed", $timezone, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTimeZone|null
	 */
	public function timezone_offset($timezoneOrOffset)
	{
		if (Lib::type()->timezone_offset($result, $timezoneOrOffset)) {
		    return $result;
		}

		throw new LogicException([ "Filter `timezone_offset` is failed", $timezoneOrOffset ]);
	}


	/**
	 * @return \DateTimeZone|null
	 */
	public function timezone_abbr($timezoneOrAbbr)
	{
		if (Lib::type()->timezone_abbr($result, $timezoneOrAbbr)) {
		    return $result;
		}

		throw new LogicException([ "Filter `timezone_abbr` is failed", $timezoneOrAbbr ]);
	}


	/**
	 * @return \DateTimeZone|null
	 */
	public function timezone_name($timezoneOrName)
	{
		if (Lib::type()->timezone_name($result, $timezoneOrName)) {
		    return $result;
		}

		throw new LogicException([ "Filter `timezone_name` is failed", $timezoneOrName ]);
	}


	/**
	 * @return \DateTimeZone|null
	 */
	public function timezone_nameabbr($timezoneOrNameOrAbbr)
	{
		if (Lib::type()->timezone_nameabbr($result, $timezoneOrNameOrAbbr)) {
		    return $result;
		}

		throw new LogicException([ "Filter `timezone_nameabbr` is failed", $timezoneOrNameOrAbbr ]);
	}


	/**
	 * @return \DateTimeInterface|null
	 */
	public function date($datestring, $timezoneFallback = null)
	{
		if (Lib::type()->date($result, $datestring, $timezoneFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `date` is failed", $datestring, $timezoneFallback ]);
	}


	/**
	 * @return \DateTime|null
	 */
	public function adate($datestring, $timezoneFallback = null)
	{
		if (Lib::type()->adate($result, $datestring, $timezoneFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `adate` is failed", $datestring, $timezoneFallback ]);
	}


	/**
	 * @return \DateTimeImmutable|null
	 */
	public function idate($datestring, $timezoneFallback = null)
	{
		if (Lib::type()->idate($result, $datestring, $timezoneFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `idate` is failed", $datestring, $timezoneFallback ]);
	}


	/**
	 * @return \DateTimeInterface|null
	 */
	public function date_formatted($dateFormatted, $formats, $timezoneFallback = null)
	{
		if (Lib::type()->date_formatted($result, $dateFormatted, $formats, $timezoneFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `date_formatted` is failed", $dateFormatted, $formats, $timezoneFallback ]);
	}


	/**
	 * @return \DateTime|null
	 */
	public function adate_formatted($dateFormatted, $formats, $timezoneFallback = null)
	{
		if (Lib::type()->adate_formatted($result, $dateFormatted, $formats, $timezoneFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `adate_formatted` is failed", $dateFormatted, $formats, $timezoneFallback ]);
	}


	/**
	 * @return \DateTimeImmutable|null
	 */
	public function idate_formatted($dateFormatted, $formats, $timezoneFallback = null)
	{
		if (Lib::type()->idate_formatted($result, $dateFormatted, $formats, $timezoneFallback)) {
		    return $result;
		}

		throw new LogicException([ "Filter `idate_formatted` is failed", $dateFormatted, $formats, $timezoneFallback ]);
	}


	/**
	 * @return \DateTimeInterface|null
	 */
	public function date_tz($datestring, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->date_tz($result, $datestring, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `date_tz` is failed", $datestring, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTime|null
	 */
	public function adate_tz($datestring, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->adate_tz($result, $datestring, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `adate_tz` is failed", $datestring, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTimeImmutable|null
	 */
	public function idate_tz($datestring, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->idate_tz($result, $datestring, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `idate_tz` is failed", $datestring, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTimeInterface|null
	 */
	public function date_tz_formatted($dateFormatted, $formats, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->date_tz_formatted($result, $dateFormatted, $formats, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `date_tz_formatted` is failed", $dateFormatted, $formats, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTime|null
	 */
	public function adate_tz_formatted($dateFormatted, $formats, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->adate_tz_formatted($result, $dateFormatted, $formats, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `adate_tz_formatted` is failed", $dateFormatted, $formats, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTimeImmutable|null
	 */
	public function idate_tz_formatted($dateFormatted, $formats, ?array $allowedTimezoneTypes = null)
	{
		if (Lib::type()->idate_tz_formatted($result, $dateFormatted, $formats, $allowedTimezoneTypes)) {
		    return $result;
		}

		throw new LogicException([ "Filter `idate_tz_formatted` is failed", $dateFormatted, $formats, $allowedTimezoneTypes ]);
	}


	/**
	 * @return \DateTimeInterface|null
	 */
	public function date_microtime($microtime, $timezoneSet = null)
	{
		if (Lib::type()->date_microtime($result, $microtime, $timezoneSet)) {
		    return $result;
		}

		throw new LogicException([ "Filter `date_microtime` is failed", $microtime, $timezoneSet ]);
	}


	/**
	 * @return \DateTime|null
	 */
	public function adate_microtime($microtime, $timezoneSet = null)
	{
		if (Lib::type()->adate_microtime($result, $microtime, $timezoneSet)) {
		    return $result;
		}

		throw new LogicException([ "Filter `adate_microtime` is failed", $microtime, $timezoneSet ]);
	}


	/**
	 * @return \DateTimeImmutable|null
	 */
	public function idate_microtime($microtime, $timezoneSet = null)
	{
		if (Lib::type()->idate_microtime($result, $microtime, $timezoneSet)) {
		    return $result;
		}

		throw new LogicException([ "Filter `idate_microtime` is failed", $microtime, $timezoneSet ]);
	}


	/**
	 * @return \DateInterval|null
	 */
	public function interval($interval)
	{
		if (Lib::type()->interval($result, $interval)) {
		    return $result;
		}

		throw new LogicException([ "Filter `interval` is failed", $interval ]);
	}


	/**
	 * @return \DateInterval|null
	 */
	public function interval_duration($duration)
	{
		if (Lib::type()->interval_duration($result, $duration)) {
		    return $result;
		}

		throw new LogicException([ "Filter `interval_duration` is failed", $duration ]);
	}


	/**
	 * @return \DateInterval|null
	 */
	public function interval_datestring($datestring)
	{
		if (Lib::type()->interval_datestring($result, $datestring)) {
		    return $result;
		}

		throw new LogicException([ "Filter `interval_datestring` is failed", $datestring ]);
	}


	/**
	 * @return \DateInterval|null
	 */
	public function interval_microtime($microtime)
	{
		if (Lib::type()->interval_microtime($result, $microtime)) {
		    return $result;
		}

		throw new LogicException([ "Filter `interval_microtime` is failed", $microtime ]);
	}


	/**
	 * @return \DateInterval|null
	 */
	public function interval_ago($date, ?\DateTimeInterface $from = null, ?bool $reverse = null)
	{
		if (Lib::type()->interval_ago($result, $date, $from, $reverse)) {
		    return $result;
		}

		throw new LogicException([ "Filter `interval_ago` is failed", $date, $from, $reverse ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return class-string<T>|null
	 */
	public function struct_exists($value, ?int $flags = null)
	{
		if (Lib::type()->struct_exists($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_exists` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return class-string<T>|null
	 */
	public function struct($value, ?int $flags = null)
	{
		if (Lib::type()->struct($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return class-string<T>|null
	 */
	public function struct_class($value, ?int $flags = null)
	{
		if (Lib::type()->struct_class($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_class` is failed", $value, $flags ]);
	}


	/**
	 * @return class-string|null
	 */
	public function struct_interface($value, ?int $flags = null)
	{
		if (Lib::type()->struct_interface($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_interface` is failed", $value, $flags ]);
	}


	/**
	 * @return class-string|null
	 */
	public function struct_trait($value, ?int $flags = null)
	{
		if (Lib::type()->struct_trait($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_trait` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of \UnitEnum
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return class-string<T>|null
	 */
	public function struct_enum($value, ?int $flags = null)
	{
		if (Lib::type()->struct_enum($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_enum` is failed", $value, $flags ]);
	}


	/**
	 * @template-covariant T of object
	 *
	 * @param class-string<T>|T|mixed $value
	 *
	 * @return class-string<T>|null
	 */
	public function struct_fqcn($value, ?int $flags = null)
	{
		if (Lib::type()->struct_fqcn($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_fqcn` is failed", $value, $flags ]);
	}


	/**
	 * @return string|null
	 */
	public function struct_namespace($value, ?int $flags = null)
	{
		if (Lib::type()->struct_namespace($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_namespace` is failed", $value, $flags ]);
	}


	/**
	 * @return string|null
	 */
	public function struct_basename($value, ?int $flags = null)
	{
		if (Lib::type()->struct_basename($result, $value, $flags)) {
		    return $result;
		}

		throw new LogicException([ "Filter `struct_basename` is failed", $value, $flags ]);
	}


	/**
	 * @return resource|null
	 */
	public function resource($value)
	{
		if (Lib::type()->resource($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `resource` is failed", $value ]);
	}


	/**
	 * @return resource|null
	 */
	public function any_not_resource($value)
	{
		if (Lib::type()->any_not_resource($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `any_not_resource` is failed", $value ]);
	}


	/**
	 * @return resource|null
	 */
	public function resource_opened($value)
	{
		if (Lib::type()->resource_opened($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `resource_opened` is failed", $value ]);
	}


	/**
	 * @return resource|null
	 */
	public function resource_closed($value)
	{
		if (Lib::type()->resource_closed($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `resource_closed` is failed", $value ]);
	}


	/**
	 * @template-covariant T of \UnitEnum
	 *
	 * @param T|int|string         $value
	 * @param class-string<T>|null $enumClass
	 *
	 * @return T|null
	 */
	public function enum_case($value, ?string $enumClass = null)
	{
		if (Lib::type()->enum_case($result, $value, $enumClass)) {
		    return $result;
		}

		throw new LogicException([ "Filter `enum_case` is failed", $value, $enumClass ]);
	}


	/**
	 * @return array{
	 */
	public function method_array($value)
	{
		if (Lib::type()->method_array($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `method_array` is failed", $value ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function method_string($value, array $refs = [])
	{
		if (Lib::type()->method_string($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `method_string` is failed", $value, $refs ]);
	}


	/**
	 * @param string|object $newScope
	 *
	 * @return callable|null
	 */
	public function callable($value, $newScope = 'static')
	{
		if (Lib::type()->callable($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable` is failed", $value, $newScope ]);
	}


	/**
	 * @return callable|\Closure|object|null
	 */
	public function callable_object($value, $newScope = 'static')
	{
		if (Lib::type()->callable_object($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_object` is failed", $value, $newScope ]);
	}


	/**
	 * @return callable|object|null
	 */
	public function callable_object_closure($value, $newScope = 'static')
	{
		if (Lib::type()->callable_object_closure($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_object_closure` is failed", $value, $newScope ]);
	}


	/**
	 * @return callable|object|null
	 */
	public function callable_object_invokable($value, $newScope = 'static')
	{
		if (Lib::type()->callable_object_invokable($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_object_invokable` is failed", $value, $newScope ]);
	}


	/**
	 * @param string|object                                            $newScope
	 *
	 * @return callable|array{
	 */
	public function callable_array($value, $newScope = 'static')
	{
		if (Lib::type()->callable_array($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_array` is failed", $value, $newScope ]);
	}


	/**
	 * @param string|object                                            $newScope
	 *
	 * @return callable|array{
	 */
	public function callable_array_method($value, $newScope = 'static')
	{
		if (Lib::type()->callable_array_method($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_array_method` is failed", $value, $newScope ]);
	}


	/**
	 * @param string|object                                     $newScope
	 *
	 * @return callable|array{
	 */
	public function callable_array_method_static($value, $newScope = 'static')
	{
		if (Lib::type()->callable_array_method_static($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_array_method_static` is failed", $value, $newScope ]);
	}


	/**
	 * @param string|object                               $newScope
	 *
	 * @return callable|array{
	 */
	public function callable_array_method_non_static($value, $newScope = 'static')
	{
		if (Lib::type()->callable_array_method_non_static($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_array_method_non_static` is failed", $value, $newScope ]);
	}


	/**
	 * @return callable-string|null
	 */
	public function callable_string($value, $newScope = 'static')
	{
		if (Lib::type()->callable_string($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_string` is failed", $value, $newScope ]);
	}


	/**
	 * @return callable-string|null
	 */
	public function callable_string_function($value)
	{
		if (Lib::type()->callable_string_function($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_string_function` is failed", $value ]);
	}


	/**
	 * @return callable-string|null
	 */
	public function callable_string_function_internal($value)
	{
		if (Lib::type()->callable_string_function_internal($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_string_function_internal` is failed", $value ]);
	}


	/**
	 * @return callable-string|null
	 */
	public function callable_string_function_non_internal($value)
	{
		if (Lib::type()->callable_string_function_non_internal($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_string_function_non_internal` is failed", $value ]);
	}


	/**
	 * @return callable-string|null
	 */
	public function callable_string_method_static($value, $newScope = 'static')
	{
		if (Lib::type()->callable_string_method_static($result, $value, $newScope)) {
		    return $result;
		}

		throw new LogicException([ "Filter `callable_string_method_static` is failed", $value, $newScope ]);
	}


	/**
	 * @template T
	 *
	 * @param int|string     $key
	 * @param array{ 0?: T } $set
	 *
	 * @return mixed|T
	 */
	public function ref($key, array $refs = [], array $set = [])
	{
		if (Lib::type()->ref($result, $key, $refs, $set)) {
		    return $result;
		}

		throw new LogicException([ "Filter `ref` is failed", $key, $refs, $set ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function path($value, array $refs = [])
	{
		if (Lib::type()->path($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `path` is failed", $value, $refs ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function realpath($value, ?bool $allowSymlink = null, array $refs = [])
	{
		if (Lib::type()->realpath($result, $value, $allowSymlink, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `realpath` is failed", $value, $allowSymlink, $refs ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function freepath($value, array $refs = [])
	{
		if (Lib::type()->freepath($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `freepath` is failed", $value, $refs ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function dirpath($value, ?bool $allowExists = null, ?bool $allowSymlink = null, array $refs = [])
	{
		if (Lib::type()->dirpath($result, $value, $allowExists, $allowSymlink, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `dirpath` is failed", $value, $allowExists, $allowSymlink, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function filepath($value, ?bool $allowExists, ?bool $allowSymlink = null, array $refs = [])
	{
		if (Lib::type()->filepath($result, $value, $allowExists, $allowSymlink, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `filepath` is failed", $value, $allowExists, $allowSymlink, $refs ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function dirpath_realpath($value, ?bool $allowSymlink = null, array $refs = [])
	{
		if (Lib::type()->dirpath_realpath($result, $value, $allowSymlink, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `dirpath_realpath` is failed", $value, $allowSymlink, $refs ]);
	}


	/**
	 * @param array{ 0: array|null } $refs
	 *
	 * @return string|null
	 */
	public function filepath_realpath($value, ?bool $allowSymlink = null, array $refs = [])
	{
		if (Lib::type()->filepath_realpath($result, $value, $allowSymlink, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `filepath_realpath` is failed", $value, $allowSymlink, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function filename($value)
	{
		if (Lib::type()->filename($result, $value)) {
		    return $result;
		}

		throw new LogicException([ "Filter `filename` is failed", $value ]);
	}


	/**
	 * @return \SplFileInfo|null
	 */
	public function file($value, ?array $extensions = null, ?array $mimeTypes = null, ?array $filters = null)
	{
		if (Lib::type()->file($result, $value, $extensions, $mimeTypes, $filters)) {
		    return $result;
		}

		throw new LogicException([ "Filter `file` is failed", $value, $extensions, $mimeTypes, $filters ]);
	}


	/**
	 * @return \SplFileInfo|null
	 */
	public function image($value, ?array $extensions = null, ?array $mimeTypes = null, ?array $filters = null)
	{
		if (Lib::type()->image($result, $value, $extensions, $mimeTypes, $filters)) {
		    return $result;
		}

		throw new LogicException([ "Filter `image` is failed", $value, $extensions, $mimeTypes, $filters ]);
	}


	/**
	 * @return string|null
	 */
	public function email($value, ?array $filters = null, array $refs = [])
	{
		if (Lib::type()->email($result, $value, $filters, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `email` is failed", $value, $filters, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function email_fake($value, array $refs = [])
	{
		if (Lib::type()->email_fake($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `email_fake` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function email_non_fake($value, ?array $filters = null, array $refs = [])
	{
		if (Lib::type()->email_non_fake($result, $value, $filters, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `email_non_fake` is failed", $value, $filters, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function phone($value, array $refs = [])
	{
		if (Lib::type()->phone($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `phone` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function phone_fake($value, array $refs = [])
	{
		if (Lib::type()->phone_fake($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `phone_fake` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function phone_non_fake($value, array $refs = [])
	{
		if (Lib::type()->phone_non_fake($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `phone_non_fake` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function phone_real($value, ?string $region = '', array $refs = [])
	{
		if (Lib::type()->phone_real($result, $value, $region, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `phone_real` is failed", $value, $region, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function tel($value, array $refs = [])
	{
		if (Lib::type()->tel($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `tel` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function tel_fake($value, array $refs = [])
	{
		if (Lib::type()->tel_fake($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `tel_fake` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function tel_non_fake($value, array $refs = [])
	{
		if (Lib::type()->tel_non_fake($result, $value, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `tel_non_fake` is failed", $value, $refs ]);
	}


	/**
	 * @return string|null
	 */
	public function tel_real($value, ?string $region = '', array $refs = [])
	{
		if (Lib::type()->tel_real($result, $value, $region, $refs)) {
		    return $result;
		}

		throw new LogicException([ "Filter `tel_real` is failed", $value, $region, $refs ]);
	}
}
